# Symbolic MPC Specification

**Symbolic Model‑Predictive Control (MPC)** is a lightweight, rolling‑plan format that lets an AI coding agent (and its human partner) decompose work, execute the next node, then recompute the rest of the task graph on every step.

This repo contains the JSON Schema (`symbolic-mpc.schema.json`) and reference materials so you can create and validate your own `*-symbolic-mpc.yaml` plans.

## Why Symbolic MPC?

| Classic PRD Pain       | Symbolic MPC Fix                                            |
| ---------------------- | ----------------------------------------------------------- |
| Waterfall, monolithic  | Rolling‑horizon planning; only the next node is locked‑in   |
| Human‑only audience    | Written for LLM agents **and** humans                       |
| Milestones & schedules | Omitted by design; focus stays on code‑generation tasks     |
| Free‑form prose        | Strict, machine‑checkable fields with optional rich context |

## Philosophy

In robotics, Model Predictive Control (MPC) plans a full trajectory, executes a single control input, then replans from the new state, a rolling-horizon strategy that keeps the robot agile in uncertain environments. Materialization brings that same principle to software planning: every node carries a 0-to-1 score expressing how "locked-in" it is. The entry node (≈ 1.0) is executed with confidence, while downstream nodes decay toward 0, signaling increasing openness to change. This quantifies the insight from Why Greatness Cannot Be Planned[^1]: rigid end-to-end blueprints invite failure, whereas flexible, step-wise commitments let emergent opportunities guide the path to success.

[^1]: Stanley, K. O., & Lehman, J. (2015). _Why Greatness Cannot Be Planned: The Myth of the Objective_. Springer. [https://link.springer.com/book/10.1007/978-3-319-15524-1](https://link.springer.com/book/10.1007/978-3-319-15524-1)

This project is also inspired by _Visualizing Task Breakdown: An Interactive Force-Directed Graph Approach to Task Management_ [Pheng (2025)](https://libraetd.lib.virginia.edu/downloads/7m01bn343?filename=Pheng_Lanah_Technical_Report.pdf).

## Repo Contents

```
.
├── symbolic-mpc.schema.json   # JSON Schema (draft‑2020‑12)
├── llm.txt                   # LLM context for generating schemas
├── example/
│   └── feature-flags-symbolic-mpc.yaml
└── docs/
    └── SPEC.md               # Full field reference
```

### LLM Context File

The `llm.txt` file provides comprehensive context about the Symbolic MPC specification for Large Language Models. This file contains the complete schema documentation, examples, and best practices to help LLMs generate valid Symbolic MPC YAML files without needing additional context or clarification.

## Quick Start

### 1. Clone & install a JSON‑Schema validator

```bash
git clone https://github.com/mattbarlow-sg/symbolic-mpc.git
cd symbolic-mpc
npm i
```

### 2. Create a plan file

Name it `<project>-symbolic-mpc.yaml`:

```yaml
version: "0.3"
plan_id: "ff-backend-001"
project_name: "Feature Flags Backend"
agent_profile: "ai-coding-agent-v1"
entry_node: "define-feature-flag-api"
nodes:
  - id: "define-feature-flag-api"
    materialization: 1.0
    description: "Create REST endpoints to CRUD feature flags."
    detailed_description: |
      Three routes: POST /flags, GET /flags/{id}, GET /flags
    outputs: ["api/handlers/*.ts"]
    agent_action: "Generate code + OpenAPI"
    downstream: ["write-unit-tests"]
```

### 3. Validate

```bash
node test-schema.js your-project-symbolic-mpc.yaml
```

If the plan is valid, you’re ready to feed the **entry node** to your AI coding agent.

## Key Concepts

| Field                  | Purpose                                                                                              |
| ---------------------- | ---------------------------------------------------------------------------------------------------- |
| `materialization`      | **0–1 float** — how "locked‑in" the node is. The agent may reorder or rewrite nodes with values < 1. |
| `detailed_description` | Paragraph‑level guidance so the agent can act with **zero clarification**.                           |
| `acceptance_criteria`  | Bullet list the human (or CI) will check before accepting the node’s PR.                             |
| `downstream`           | Forward pointers to dependent nodes; the graph is acyclic by convention.                             |

See **`docs/SPEC.md`** for the full field reference.

{
  "$id": "https://example.com/symbolic-mpc.schema.json",
  "title": "Symbolic MPC Specification",
  "type": "object",
  "required": [
    "version",
    "plan_id",
    "project_name",
    "agent_profile",
    "architecture",
    "tooling",
    "entry_node",
    "nodes"
  ],
  "additionalProperties": false,

  "properties": {
    "version": { "type": "string" },
    "plan_id": { "type": "string" },
    "project_name": { "type": "string" },
    "agent_profile": { "type": "string" },

    "context": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "business_goal": { "type": "string" },
        "non_functional_requirements": {
          "type": "array",
          "items": { "type": "string" }
        },
        "personas": {
          "type": "array",
          "items": { "$ref": "#/$defs/persona" }
        }
      }
    },

    "architecture": {
      "type": "object",
      "required": ["overview"],
      "additionalProperties": false,
      "properties": {
        "overview": { "type": "string" },
        "constraints": {
          "type": "array",
          "items": { "type": "string" }
        },
        "integration_points": {
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },

    "tooling": {
      "type": "object",
      "required": ["primary_language", "frameworks", "package_manager"],
      "additionalProperties": false,
      "properties": {
        "primary_language": { "type": "string" },
        "secondary_languages": {
          "type": "array",
          "items": { "type": "string" }
        },
        "frameworks": {
          "type": "array",
          "items": { "type": "string" },
          "minItems": 1
        },
        "package_manager": { "type": "string" },
        "coding_standards": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "lint": { "type": "string" },
            "formatting": { "type": "string" },
            "testing": { "type": "string" }
          }
        }
      }
    },

    "entry_node": { "type": "string" },

    "nodes": {
      "type": "array",
      "minItems": 1,
      "items": { "$ref": "#/$defs/node" }
    }
  },

  "$defs": {
    "persona": {
      "type": "object",
      "required": ["name", "need"],
      "additionalProperties": false,
      "properties": {
        "name": { "type": "string" },
        "need": { "type": "string" }
      }
    },

    "node": {
      "type": "object",
      "required": [
        "id",
        "status",
        "materialization",
        "description",
        "detailed_description",
        "outputs",
        "agent_action"
      ],
      "additionalProperties": false,
      "properties": {
        "id": { "type": "string" },

        "status": {
          "type": "string",
          "enum": ["Completed", "Ready", "Blocked", "Paused"]
        },

        "materialization": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },

        "description": { "type": "string" },
        "detailed_description": { "type": "string" },

        "inputs": {
          "type": "array",
          "items": { "type": "string" },
          "default": []
        },

        "outputs": {
          "type": "array",
          "items": { "type": "string" }
        },

        "acceptance_criteria": {
          "type": "array",
          "items": { "type": "string" },
          "default": []
        },

        "definition_of_done": { "type": "string" },

        "required_knowledge": {
          "type": "array",
          "items": { "type": "string" },
          "default": []
        },

        "agent_action": { "type": "string" },

        "downstream": {
          "type": "array",
          "items": { "type": "string" },
          "default": []
        }
      }
    }
  }
}

# Symbolic MPC Specification v0.3

## Overview

This document provides the complete field reference for the Symbolic Model-Predictive Control (MPC) specification. Symbolic MPC is a lightweight, rolling-plan format designed for AI coding agents and their human partners to decompose work, execute the next node, then recompute the rest of the task graph on every step.

## Schema Validation

All Symbolic MPC plans must conform to the JSON Schema defined in `symbolic-mpc.schema.json`. Use a JSON Schema validator like `ajv-cli` to validate your plans:

```bash
ajv validate -s symbolic-mpc.schema.json -d your-plan.yaml
```

## File Format

Symbolic MPC plans are written in YAML format and should be named using the pattern: `<project>-symbolic-mpc.yaml`

## Top-Level Structure

### Required Fields

| Field           | Type   | Description                                       |
| --------------- | ------ | ------------------------------------------------- |
| `version`       | string | Specification version (currently "0.3")           |
| `plan_id`       | string | Unique identifier for this plan                   |
| `project_name`  | string | Human-readable project name                       |
| `agent_profile` | string | Target agent profile (e.g., "ai-coding-agent-v1") |
| `architecture`  | object | Architectural overview and constraints            |
| `tooling`       | object | Technology stack and standards                    |
| `entry_node`    | string | ID of the node where execution begins             |
| `nodes`         | array  | List of all plan nodes                            |

### Optional Fields

| Field     | Type   | Description                            |
| --------- | ------ | -------------------------------------- |
| `context` | object | Global context shared across all nodes |

## Context Object

The `context` object provides global information that agents can reference throughout plan execution.

### Optional Fields

| Field                         | Type           | Description                                |
| ----------------------------- | -------------- | ------------------------------------------ |
| `business_goal`               | string         | High-level business objective              |
| `non_functional_requirements` | array[string]  | Performance, cost, and quality constraints |
| `personas`                    | array[persona] | User personas and their needs              |

### Persona Object

| Field  | Type   | Description                                   |
| ------ | ------ | --------------------------------------------- |
| `name` | string | Persona name (e.g., "PM", "Backend Engineer") |
| `need` | string | What this persona needs from the system       |

## Architecture Object

Defines the overall system architecture and constraints.

### Required Fields

| Field      | Type   | Description                          |
| ---------- | ------ | ------------------------------------ |
| `overview` | string | High-level architectural description |

### Optional Fields

| Field                | Type          | Description                                |
| -------------------- | ------------- | ------------------------------------------ |
| `constraints`        | array[string] | Architectural limitations and requirements |
| `integration_points` | array[string] | External systems and interfaces            |

## Tooling Object

Specifies the technology stack and development standards.

### Required Fields

| Field              | Type          | Description                       |
| ------------------ | ------------- | --------------------------------- |
| `primary_language` | string        | Main programming language         |
| `frameworks`       | array[string] | Required frameworks and libraries |
| `package_manager`  | string        | Package management tool           |

### Optional Fields

| Field                 | Type          | Description                         |
| --------------------- | ------------- | ----------------------------------- |
| `secondary_languages` | array[string] | Additional languages used           |
| `coding_standards`    | object        | Code quality and style requirements |

### Coding Standards Object

| Field        | Type   | Description              |
| ------------ | ------ | ------------------------ |
| `lint`       | string | Linting configuration    |
| `formatting` | string | Code formatting standard |
| `testing`    | string | Testing requirements     |

## Node Object

Nodes represent individual work items in the plan. Each node should be atomic and executable by an AI agent.

### Required Fields

| Field                  | Type          | Description                              |
| ---------------------- | ------------- | ---------------------------------------- |
| `id`                   | string        | Unique node identifier                   |
| `status`               | string        | Node status (see Status Values below)    |
| `materialization`      | number        | Commitment level (0.0-1.0)               |
| `description`          | string        | Brief, one-line description              |
| `detailed_description` | string        | Comprehensive execution guidance         |
| `outputs`              | array[string] | Expected deliverable file paths/patterns |
| `agent_action`         | string        | Specific action for the agent to take    |

### Optional Fields

| Field                 | Type          | Description                       |
| --------------------- | ------------- | --------------------------------- |
| `inputs`              | array[string] | Required input files/dependencies |
| `acceptance_criteria` | array[string] | Checklist for accepting the work  |
| `definition_of_done`  | string        | Clear completion criteria         |
| `required_knowledge`  | array[string] | Domain knowledge needed           |
| `downstream`          | array[string] | IDs of dependent nodes            |

## Field Details

### Status Values

The `status` field indicates the current state of a node:

- **`Completed`**: Node has been successfully executed
- **`Ready`**: Node is ready to be executed (all dependencies met)
- **`Blocked`**: Node is waiting on dependencies or external factors
- **`Paused`**: Node execution has been temporarily suspended

### Materialization

The `materialization` field represents how "locked-in" a node is:

- **1.0**: Fully committed, execute immediately
- **0.7-0.9**: High confidence, minor adjustments possible
- **0.4-0.6**: Medium confidence, significant changes likely
- **0.0-0.3**: Low confidence, may be reordered or rewritten

### Node Descriptions

- **`description`**: Single sentence summary for quick scanning
- **`detailed_description`**: Multi-line guidance with enough detail for zero-clarification execution. Use YAML literal block syntax (`|`) for multi-line content.

### Inputs and Outputs

- **`inputs`**: Files, APIs, or artifacts this node depends on
- **`outputs`**: Files, APIs, or artifacts this node will create
- Use glob patterns where appropriate (e.g., `"api/handlers/*.ts"`)

### Acceptance Criteria

Bullet-point checklist that humans or CI systems can verify:

```yaml
acceptance_criteria:
  - "Local CDK synth succeeds with `cdk synth`"
  - "OpenAPI file validates with spectral"
  - "Handlers compile with no eslint errors"
```

### Agent Actions

Clear, actionable instructions for the AI agent:

- "Generate code + OpenAPI; push commit"
- "Write data access layer and update CDK app"
- "Generate tests"

## Graph Structure

Nodes form a directed acyclic graph (DAG) through the `downstream` field:

- Use node IDs to reference dependencies
- Avoid circular dependencies
- The `entry_node` should have `materialization: 1.0`

## Best Practices

### Planning Strategy

1. **Start concrete, get abstract**: Begin with high-materialization nodes for immediate execution
2. **Decay downstream**: Lower materialization values for future nodes to maintain flexibility
3. **Atomic nodes**: Each node should represent a single, completable unit of work

### Writing Descriptions

1. **Be specific**: Include exact commands, file names, and expected outputs
2. **Zero ambiguity**: Agent should never need clarification
3. **Context-aware**: Reference the global `context` and `architecture` when relevant

### Tool Integration

Structure outputs to work with common development tools:

```yaml
outputs: ["src/components/*.tsx", "src/types/api.ts"]
acceptance_criteria:
  - "`npm run typecheck` passes"
  - "`npm test` shows >95% coverage"
```

## Example Plan Structure

```yaml
version: "0.3"
plan_id: "example-001"
project_name: "Example Project"
agent_profile: "ai-coding-agent-v1"

context:
  business_goal: "Solve a specific problem efficiently"
  personas:
    - name: "Developer"
      need: "Clean, maintainable code"

architecture:
  overview: "Simple web application"
  constraints:
    - "No external dependencies"

tooling:
  primary_language: "TypeScript"
  frameworks: ["React", "Node.js"]
  package_manager: "npm"

entry_node: "setup-project"

nodes:
  - id: "setup-project"
    status: "Ready"
    materialization: 1.0
    description: "Initialize project structure"
    detailed_description: |
      Create package.json, tsconfig.json, and basic folder structure.
      Use create-react-app for frontend bootstrapping.
    outputs: ["package.json", "src/", "public/"]
    agent_action: "Generate project scaffolding"
    downstream: ["implement-core-feature"]

  - id: "implement-core-feature"
    status: "Blocked"
    materialization: 0.8
    description: "Build main application feature"
    detailed_description: |
      Implement the core business logic based on requirements.
    inputs: ["package.json", "src/"]
    outputs: ["src/components/", "src/utils/"]
    agent_action: "Write feature implementation"
    downstream: []
```

## Version History

- **v0.3**: Added node status field for execution tracking
- **v0.2**: Full schema specification
- **v0.1**: Initial draft specification

## References

1. Stanley, K. O., & Lehman, J. (2015). _Why Greatness Cannot Be Planned: The Myth of the Objective_. Springer.
2. Pheng, L. (2025). _Visualizing Task Breakdown: An Interactive Force-Directed Graph Approach to Task Management_. University of Virginia Technical Report.



================================================
FILE: examples/feature-flags-backend.yaml
================================================
version: "0.3"
plan_id: "symbolic-mpc-001"
project_name: "Feature Flags Backend"
agent_profile: "ai-coding-agent-v1"

# --- Global context the agent will reuse in every node -------------
context:
  business_goal: "Allow product managers to toggle features per user cohort without deploys."
  non_functional_requirements:
    - "P99 API latency < 150 ms"
    - "Cost ceiling: $20/month for 10 M evals"
  personas:
    - name: "PM"
      need: "Enable / disable flags visually"
    - name: "Backend Engineer"
      need: "Query flag state with minimal latency"

architecture:
  overview: "Stateless Lambda functions fronted by API Gateway, DynamoDB for storage."
  constraints:
    - "No long-lived EC2 instances"
    - "IaC via AWS CDK (TypeScript)"

tooling:
  primary_language: "TypeScript"
  secondary_languages: ["YAML", "JSON"]
  frameworks: ["AWS CDK", "Node.js 20", "Jest"]
  package_manager: "pnpm"
  coding_standards:
    lint: "eslint-config-standard-with-typescript"
    formatting: "prettier"
    testing: "100 % branches on new code"

entry_node: "define-feature-flag-api"

# ------------------- Symbolic MPC Nodes -----------------------------
nodes:
  - id: "define-feature-flag-api"
    status: "Completed"
    materialization: 1.0 # Fully committed
    description: "Create REST endpoints to CRUD feature flags."
    detailed_description: |
      * Three routes: POST /flags, GET /flags/{id}, GET /flags
      * POST body schema:
          { name: string, variations: string[], rollout: { type: "percentage", value: number } }
      * Return 201 with Location header on create.
      * Use AWS CDK constructs: RestApi, LambdaIntegration.
    inputs: []
    outputs: ["api/handlers/*.ts", "cdk/lib/api-stack.ts", "openapi.yaml"]
    acceptance_criteria:
      - "Local CDK synth succeeds with `cdk synth`."
      - "OpenAPI file validates with spectral."
      - "Handlers compile with no eslint errors."
    definition_of_done: |
      PR containing CDK stack, handlers, and OpenAPI spec that passes CI.
    required_knowledge:
      - "AWS CDK REST API patterns"
      - "TypeScript async/await"
    agent_action: "Generate code + OpenAPI; push commit."
    downstream: ["implement-dynamo-storage", "write-unit-tests"]

  - id: "implement-dynamo-storage"
    status: "Ready"
    materialization: 0.7 # Likely but still adjustable
    description: "Persist flag objects in DynamoDB."
    detailed_description: |
      * Table name: FlagsTable
      * Partition key: flagId (ULID)
      * GSI-1: name -> flagId
      * Use DocumentClient v3.
      * Provide CRUD functions in `data/flags.ts`.
    inputs: ["openapi.yaml", "flag handler skeletons"]
    outputs: ["data/flags.ts", "cdk/lib/storage-stack.ts"]
    acceptance_criteria:
      - "`npm run test:data` passes with mocked DynamoDB."
    definition_of_done: "Data layer code + table definition in CDK."
    required_knowledge: ["DynamoDB modelling", "AWS SDK v3"]
    agent_action: "Write data access layer and update CDK app."
    downstream: ["write-integration-tests"]

  - id: "write-unit-tests"
    status: "Ready"
    materialization: 0.9
    description: "Cover handler logic with Jest."
    detailed_description: |
      Focus on input validation, response codes, and error paths.
    inputs: ["handlers"]
    outputs: ["test/handlers/*.test.ts"]
    acceptance_criteria:
      - ">= 95 % statement coverage on handlers."
    definition_of_done: "Green Jest run in CI."
    required_knowledge: ["jest", "@aws-sdk/client-mock"]
    agent_action: "Generate tests."
    downstream: []

  - id: "write-integration-tests"
    status: "Blocked"
    materialization: 0.4
    description: "End-to-end tests hitting a local DynamoDB container."
    detailed_description: |
      Use dynamodb-local + aws-sdk v3. Spin up in `docker-compose.test.yml`.
    inputs: ["FlagsTable", "data layer"]
    outputs: ["test/integration/*.test.ts", "docker-compose.test.yml"]
    acceptance_criteria:
      - "All CRUD flows succeed."
    definition_of_done: "CI workflow green on integration job."
    required_knowledge: ["Docker", "jest"]
    agent_action: "Write integration tests."
    downstream: []
